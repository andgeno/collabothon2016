Sammlung mit den wichtigsten Befehlen:


Einen neuen Account anlegen
	geth --datadir "./data" --dev account new
	
Testnetz starten
	./geth.exe --testnet --mine --minerthreads 1 --unlock 0 console
	
Stop the running miner ("start()" zum Starten)
	miner.stop()

Zeige alle Accounts an
	eth.accounts
	
Zeige den Wert eines Accounts an
	eth.getBalance(eth.accounts[0])
	
Einen neuen Account anlegen (aus der Javascript-Konsole)
	personal.newAccount("SecurePassword")
	
Die noch nicht gemineten Transaktionen ansehen
	eth.pendingTransactions
	
Transatkionsdetails zu einem Transaktionshash heraussuchen (wird zurueckgegeben, wenn beispielsweise ein Contract angelegt wird)
	eth.getTransaction("0xbeae67eeb2be9f54ce9c1249c1cb7c174f2b0ce3ebcc4cf4135d604bc4ecadc9")
	
Transaktionsdtails zu einem Transaktionshash heraussuchen (enthaelt auch die ContractAddress)
	eth.getTransactionReceipt("0xbeae67eeb2be9f54ce9c1249c1cb7c174f2b0ce3ebcc4cf4135d604bc4ecadc9").contractAddress
	
Beispielhafter Contract mit den Methoden "pay" und "check"
	var singlepersonContract = web3.eth.contract([{"constant":false,"inputs":[],"name":"pay","outputs":[],"payable":true,"type":"function"},{"constant":false,"inputs":[],"name":"kill","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"check","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"inputs":[],"type":"constructor"}]);
	var singleperson = singlepersonContract.new(
		{
		 from: web3.eth.accounts[0], 
		 data: '606060405260006001600050555b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908302179055505b610156806100476000396000f360606040526000357c0100000000000000000000000000000000000000000000000000000000900480631b9265b81461005257806341c0e1b514610061578063919840ad146100755761004d565b610002565b61005f600480505061009f565b005b346100025761007360048050506100ac565b005b34610002576100876004805050610140565b60405180821515815260200191505060405180910390f35b346001600050819055505b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561013d57600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b6000600060016000505414159050610153565b9056', 
		 gas: 2000000
	   }, function (e, contract){
		console.log(e, contract);
		if (typeof contract.address !== 'undefined') {
			 console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
		}
	})
	
Bezahle 1 Ether an den Contract mit der als "payable" markierten Methode "pay"
	var txhash = singleperson.pay.sendTransaction({from: web3.eth.accounts[0], value: web3.toWei(1, "ether")})
	
Bei Problemen koennen folgende Methoden Ausschluss ueber den Grund geben (ein fehlerhafter "JUMP" weist auf eine Exception hin: zu wenig Gas, fehlerhafter Indexzugriff, Stack-Underflow, Stack-Overflow, Methode mit msg.sender / msg.value nicht als "payable" gekennzeichnet)
	var status = debug.traceTransaction(txhash)
	status.structLogs[status.structLogs.length-1].error
	
Um den Code (hexadezimal) eines Vertrags zu erhalten
	eth.getCode(singleperson.address)
	
Beispielquellcode, der beispielsweise mithilfe von einem online-Compiler kompiliert werden kann (https://ethereum.github.io/browser-solidity/#version=soljson-v0.4.2+commit.af6afb04.js&optimize=false)
	contract singlePerson {
		address owner;
		function singlePerson() { owner = msg.sender; }
		function kill() { if (msg.sender == owner) selfdestruct(owner); }
		
		uint256 money = 0;
		function pay() public payable {
			money = msg.value;
		}
		
		function check() public constant returns (bool){
			return money != 0;
		}
	}
	
	
	
	
	
Testbereich:


	contract singlePerson {
		address owner;
		function singlePerson() { owner = msg.sender; }
		function kill() { if (msg.sender == owner) selfdestruct(owner); }
		
		uint money;
		function payMoney() public constant returns (bool) {
			if(money != 0 || msg.value == 0){
				return false;
			}
			
			money = msg.value;
			return true;
		}
		
		function paid() public constant returns (bool){
			return money == 0;
		}
	}


	60606040525b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908302179055505b6101978061003f6000396000f360606040526000357c0100000000000000000000000000000000000000000000000000000000900480631dc1c5e314610052578063295b4e171461007a57806341c0e1b5146100a25761004d565b610002565b346100025761006460048050506100b6565b6040518082815260200191505060405180910390f35b346100025761008c60048050506100f1565b6040518082815260200191505060405180910390f35b34610002576100b46004805050610103565b005b600060006001600050541415806100cd5750600034145b156100dc5761053990506100ee565b346001600050819055503490506100ee565b90565b60006001600050549050610100565b90565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561019457600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b56

	[{"constant":false,"inputs":[],"name":"payMoney","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"paid","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"kill","outputs":[],"payable":false,"type":"function"},{"inputs":[],"type":"constructor"}]


	var singlepersonContract = web3.eth.contract([{"constant":false,"inputs":[],"name":"payMoney","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"paid","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"kill","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"money","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"type":"constructor"}]);
	var singleperson = singlepersonContract.new(
	   {
		 from: web3.eth.accounts[0], 
		 data: '60606040525b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908302179055505b6101d38061003f6000396000f360606040526000357c0100000000000000000000000000000000000000000000000000000000900480631dc1c5e31461005d578063295b4e171461008557806341c0e1b5146100ad5780634ddd108a146100c157610058565b610002565b346100025761006f60048050506100e9565b6040518082815260200191505060405180910390f35b34610002576100976004805050610124565b6040518082815260200191505060405180910390f35b34610002576100bf6004805050610136565b005b34610002576100d360048050506101ca565b6040518082815260200191505060405180910390f35b600060006001600050541415806101005750600034145b1561010f576105399050610121565b34600160005081905550349050610121565b90565b60006001600050549050610133565b90565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156101c757600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b6001600050548156', 
		 gas: 2000000
	   }, function (e, contract){
		console.log(e, contract);
		if (typeof contract.address !== 'undefined') {
			 console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
		}
	 })
	 
	 
	var singlepersonContract = web3.eth.contract([{"constant":false,"inputs":[],"name":"payMoney","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"paid","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"goal","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"kill","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"money","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"check","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"amount","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"type":"constructor"}]);
	var singleperson = singlepersonContract.new(
	   {
		 from: web3.eth.accounts[0], 
		 data: '60606040526000600260006101000a81548160ff021916908302179055505b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908302179055505b6102c4806100586000396000f36060604052361561007f576000357c0100000000000000000000000000000000000000000000000000000000900480631dc1c5e314610084578063295b4e17146100ac57806340193883146100d457806341c0e1b5146100fe5780634ddd108a14610112578063919840ad1461013a578063aa8c217c146101625761007f565b610002565b3461000257610096600480505061018a565b6040518082815260200191505060405180910390f35b34610002576100be60048050506101c4565b6040518082815260200191505060405180910390f35b34610002576100e660048050506101d6565b60405180821515815260200191505060405180910390f35b346100025761011060048050506101e9565b005b3461000257610124600480505061027d565b6040518082815260200191505060405180910390f35b346100025761014c6004805050610286565b6040518082815260200191505060405180910390f35b346100025761017460048050506102bb565b6040518082815260200191505060405180910390f35b60006001600260006101000a81548160ff0219169083021790555034600360005081905550346001600050819055503490506101c1565b90565b600060016000505490506101d3565b90565b600260009054906101000a900460ff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561027a57600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b60016000505481565b6000600260009054906101000a900460ff16156102ae5760036000505490506102b8566102b7565b600090506102b8565b5b90565b6003600050548156', 
		 gas: 2000000
	   }, function (e, contract){
		console.log(e, contract);
		if (typeof contract.address !== 'undefined') {
			 console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
		}
	 })
	 
	var singlepersonContract = web3.eth.contract([{"constant":false,"inputs":[],"name":"payMoney","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balances","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"paid","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"goal","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"kill","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"money","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"check","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"amount","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"type":"constructor"}]);
	var singleperson = singlepersonContract.new(
	   {
		 from: web3.eth.accounts[0], 
		 data: '60606040526000600260006101000a81548160ff021916908302179055505b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908302179055505b61035d806100586000396000f36060604052361561008a576000357c0100000000000000000000000000000000000000000000000000000000900480631dc1c5e31461008f57806327e235e3146100b7578063295b4e17146100e8578063401938831461011257806341c0e1b51461013c5780634ddd108a14610150578063919840ad14610178578063aa8c217c146101a25761008a565b610002565b34610002576100a160048050506101ca565b6040518082815260200191505060405180910390f35b34610002576100d26004808035906020019091905050610238565b6040518082815260200191505060405180910390f35b34610002576100fa6004805050610253565b60405180821515815260200191505060405180910390f35b34610002576101246004805050610288565b60405180821515815260200191505060405180910390f35b346100025761014e600480505061029b565b005b3461000257610162600480505061032f565b6040518082815260200191505060405180910390f35b346100025761018a6004805050610338565b60405180821515815260200191505060405180910390f35b34610002576101b46004805050610354565b6040518082815260200191505060405180910390f35b60006001600260006101000a81548160ff0219169083021790555034600460005060003373ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050819055503460036000508190555034600160005081905550349050610235565b90565b60046000506020528060005260406000206000915090505481565b60006001600260006101000a81548160ff02191690830217905550600260009054906101000a900460ff169050610285565b90565b600260009054906101000a900460ff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561032c57600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b60016000505481565b6000600260009054906101000a900460ff169050610351565b90565b6003600050548156', 
		 gas: 2000000
	   }, function (e, contract){
		console.log(e, contract);
		if (typeof contract.address !== 'undefined') {
			 console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
		}
	 })
	 
	var singlepersonContract = web3.eth.contract([{"constant":false,"inputs":[],"name":"pay","outputs":[],"payable":true,"type":"function"},{"constant":false,"inputs":[],"name":"kill","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"check","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"inputs":[],"type":"constructor"}]);
	var singleperson = singlepersonContract.new(
	   {
		 from: web3.eth.accounts[0], 
		 data: '606060405260006001600050555b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908302179055505b610156806100476000396000f360606040526000357c0100000000000000000000000000000000000000000000000000000000900480631b9265b81461005257806341c0e1b514610061578063919840ad146100755761004d565b610002565b61005f600480505061009f565b005b346100025761007360048050506100ac565b005b34610002576100876004805050610140565b60405180821515815260200191505060405180910390f35b346001600050819055505b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561013d57600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b6000600060016000505414159050610153565b9056', 
		 gas: 2000000
	   }, function (e, contract){
		console.log(e, contract);
		if (typeof contract.address !== 'undefined') {
			 console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
		}
	 })
	 
	 
	 
	 eth.sendTransaction({from: web3.eth.accounts[0], to: singleperson.address, value: web3.toWei(10, "ether"), gas: 2000000})
	 singleperson.payMoney.sendTransaction({from: web3.eth.accounts[0], to: singleperson.address, value: web3.toWei(1, "ether")})
	 var txhash = singleperson.pay.sendTransaction({from: web3.eth.accounts[0], value: web3.toWei(1, "ether")})
	 var txhash = singleperson.pay.sendTransaction({from: web3.eth.accounts[0], value: web3.toWei(1, "ether"), gas: 4000000})
	 singleperson.payMoney.call({from: web3.eth.accounts[0], value: web3.toWei(1, "ether")})
	 singleperson.payMoney({from: web3.eth.accounts[0], value: web3.toWei(1, "ether")})
	 
	 singleperson.payMoney.sendTransaction({from: web3.eth.accounts[0], value: web3.toWei(1, "ether"), gas: 2000000})
	 singleperson.check.sendTransaction({from: web3.eth.accounts[0], value: web3.toWei(1, "ether"), gas: 2000000})
	 
	 
	 var txhash = singleperson.pay(5, web3.eth.accounts[0], {
	  from:web3.eth.accounts[0], 
	  gas: 2000000, 
	  data: '[{"name":"singlePerson","interface":"[{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"check\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]\n","bytecode":"606060405260006001600050555b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908302179055505b610167806100476000396000f360606040526000357c01000000000000000000000000000000000000000000000000000000009004806341c0e1b514610052578063919840ad14610066578063c290d6911461008e5761004d565b610002565b346100025761006460048050506100ab565b005b3461000257610078600480505061013f565b6040518082815260200191505060405180910390f35b34610002576100a96004808035906020019091905050610151565b005b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561013c57600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b6000600160005054905061014e565b90565b8060016000828282505401925050819055505b5056"}]',
	  value: web3.toWei(1, "ether")
	});

	var status = debug.traceTransaction(txhash)
	status.structLogs[status.structLogs.length-1].error


